10. PL/SQL

가. PL/SQL 이란?
  PL/SQL : Oracle's Procedural Language extension to SQL
  오라클에 내장되어 있는 절차형 언어
  프로그램을 논리적인 블록으로 나누는 구조화된 블록 언어
  변수 선언문, 조건문, 반복문(loop, while, for) 등을 지원
  
나. PL/SQL Block Structure
  선언부(선택), 실행부(필수), 예외 처리부(선택)로 구성됨
  BEGIN과 END 키워드는 반드시 기술
  --형식
    DECLARE 
	  Declarative Section (선언부)
	BEGIN
	  Executable Section (실행부)
	EXCEPTION
      Exception Handling Section (예외처리부)	
	END;
  
  1) Declarative Section(선언부, 선택)
    변수, 상수, CURSOR(위치) 등을 선언
  2) Executable Section (실행부, 필수)
    SQL 문장, 반복문, 조건문 등을 실행
	BEGIN 으로 시작하고 END로 끝남
  3) Exception Handling Section (예외처리부, 선택)
    예외에 대한 처리

다. Block Type(PL/SQL 블럭의 유형)
1) [Anonymous]
  이름이 없는 블록 
--형식
  [DECLARE]
  
  BEGIN
     -statements
  [EXCEPTION]
  END;

2)[Procedure]
  -특정 작업을 수행할 수 있고, 이름이 있는 PL/SQL블록
  -매개 변수를 입력받을 수 있음
  -DB에 저장되어 반복적으로 사용할 수 있음
  -배치 작업 또는 구현이 복잡한 트랜잭션을 수행하는 용도로 사용함.
  -입력매개변수와 출력매개변수가 있다.
 
--형식
  PROCEDURE name
  IS
  BEGIN
     -statements
  [EXCEPTION]
  END;

3)[Function] 
  - 값을 계산하고 결과값을 반환하기 위해서 사용
  - 저장프로시저와의 차이점 : 입력매개변수만 사용할 수 있고 리턴 타입을
    반드시 지정해야 함.

--형식
  FUNCTION name
  RETURN datatype
  IS
  BEGIN
     -statements
  RETURN value;
  [EXCEPTION]
  END;


라. 저장 프로시저
  1) Stored Procedure(SP, 저장 프로시저)
    가) 특정 작업을 수행할 수 있고, 이름이 있는 PL/SQL 블록
	나) 매개 변수를 입력받을 수 있음
    다) DB에 저장되어 반복적으로 사용할 수 있음
    라) 배치 작업 또는 구현이 복잡한 트랜잭션을 수행하는 용도로 사용함.
    마)입력매개변수와 출력매개변수가 있다.
  2) 형식
    CREATE OR REPLACE 저장프시저이름
	(매개변수)
	IS
	  변수 선언
	BEGIN
	  문장
	END;
  3) 예제
    가) 급여인상 저장 프로시저로 처리
	  -- create or replace procedure 프로시저이름(매개변수)
	  -- 입력매개변수 : 변수명 in 자료형
	  -- 출력매개변수 : 변수명 out 자료형
	  
	  create or replace procedure update_sal(v_empno in number)
	  --in생략 가능
	  is -- 선언부
	  begin --실행부, 모든 sql + 제어문(if,loop,for)
	    update emp
		set sal=sal*1.1 --급여10%인상 처리
		where empno=v_empno; --update문, v_empno는 사원번호입력용 변수
	  end; --종료
	  /
	  
	  -- 저장 프로시저의 실행 방법
	  -- execute 저장프시저이름(입력값)
	  
	  select * from emp; --사원번호, sal 확인
	  execute update_sal(7369);
	  
	  select * from emp where empno=7902;
	  
	  (참고) java에서 저장프로시저를 호출할 땐
	  CallableStatement
	  {call update_sal(7369)}
	  
	나) 한줄메모장 저장 프로시저 실습
    -- 한줄메모장 테이블
    create table memo (
    idx number primary key,
	writer varchar2(50) not null,
	memo varchar2(500) not null,
	post_date date default sysdate
    );	
	
    -- 시퀀스 생성
    create sequence memo_seq
    start with 1
    increment by 1
    nomaxvalue; --무제한 증가	
	
	insert into memo (idx,writer,memo) 
	values (memo_seq.nextval, 'kim', 'memo');
	insert into memo (idx,writer,memo) 
	values (memo_seq.nextval, 'park', 'memo2');
	
	commit;
	
	select * from memo;
	
	--ip주소를 저장할 수 있는 컬럼 추가
	alter table memo add (ip varchar2(50));
	
	--저장 프로시저 작성
	--[insert절 프로시저 만들기]
	create or replace procedure
	memo_insert( v_writer in varchar, v_memo in varchar, v_ip in varchar)
	is
	begin
	 insert into memo (idx,writer,memo,ip)
	 values (memo_seq.nextval, v_writer, v_memo, v_ip);
	end;
	/
	
	--저장 프로시저 호출
	execute memo_insert('김철수','메모','192.168.0.2');
	select * from memo;
	
	commit;
	
	--데이터 사전 조회(저장 프로시저, 사용자 정의 함수..)
	select * from user_source
	where name='MEMO_INSERT';--객체(테이블,시퀀스,프로시저)이름은 대문자로
	
	select * from user_source
	where name='UPDATE_SAL';
	
	--[SELECT절 프로시저 만들기]
	create or replace procedure memo_list(v_row out sys_refcursor)
	is
	begin
	 open v_row for --open 커서변수 for select문장
	   select idx,writer,memo,post_date,ip
	   from memo
	   order by idx desc;
	end;
	/
	
	--v_row : 레코드 한 개를 저장할 수 있는 커서변수
	--out : 출력매개변수(호출한 곳으로 리턴되는 값으로 처리하는 기능)
	--in : 입력매개변수
	--sys_refcursor : 레코드를 한개씩 조회할 수 있는 자료형(커서),
	  java의 ResultSet과 비슷한 기능
	
    --select절 프로시저의 매개변수 선언
    --형식 : variable 변수이름 데이터타입 or refcursor
	variable a refcursor;
	
	--프로시저 호출 및 실행 (:매개변수)
	--java에서 ?,?로 값을 받아 처리하는 PrepareStatement와 비슷
	execute memo_list(:a);
	
	--프로시저 출력
	print a;
	
	--데이터사전조회
	select * from user_source where name='MEMO_LIST';
	
마. 함수(Function)
  1) 값을 계산하고 결과값을 반환하기 위해서 사용
  2) 저장 프로시저와의 차이점
     입력 매개변수만 사용할 수 있고 리턴 타입을 반드시 지정해야 함
  3) 형식
     CREATE OR REPLACE FUNCTION 함수이름
	 [(argument...)]
	 RETURN datatype
	   --
	 IS
	   변수 선언
	 BEGIN
	   --문장
	   retrun
	 END;
  4) 저장함수 예제
     create or replace function fn_update_sal(v_empno number)
	 --입력매개변수만 혀용
	 return number --리턴 자료형
	 is
	  v_sal number; --지역 변수
	 begin
	  update emp set sal=sal*1.1
	  where empno=v_empno;
	  select sal into v_sal from emp
	  where empno=v_empno;
	  return v_sal; -- 인상된 금액을 리턴
	 end;
	 /
	 
	  select sal from emp where empno=7369;
	  
	  select fn_update_sal(7369) from dual;
	  
	  ORA-14551: cannot perform a DML operation inside a query 
	  DML:insert,delete,update
	  -- select문 안에서 DML문 사용할 수 없음
	  
	  --변수와 대입문을 활용하여 처리
	  --변수선언, 함수호출, 리턴값을 salary변수에 저장
	  --salary변수에 저장된 값을 출력
	  --A := B ==>B의 값을 A에 대입, ":=" 대입문 cf)A=B (A와B가 같다)
	  -- :변수 => 바인딩변수(리턴값을 받는 변수)
	  
	  var salary number;
	  execute :salary := fn_update_sal(7369);
	  print salary;
	  
	--예) 급여의 200%를 지급하는 특별보너스 출력
	create or replace function cal_bonus( vempno in emp.empno%type )
	return number
	is
	 vsal number(7,2);
	begin
	 select sal into vsal
	 from emp
	 where empno=vempno;
	 return (vsal * 2);
	end;
	/
	
	--바인드변수 선언
	variable var_res number;
	--저장함수 실행
	execute :var_res := cal_bonus(7521);
	--바인드변수 출력
	print var_res;
	
	select sal, cal_bonus(7521)
    from emp
    where empno=7521;	
  
  
바. PL/SQL 제어문
  1) %TYPE 데이터형
    가) 테이블의 컬럼 데이터 타입을 모를 경우 사용
    나) 테이블의 데이터 타입이 변경될 경우 다시 수정할 필요가 없음
    
    -- 실습
	--테이블.컬럼%type
	create or replace procedure emp_info(p_empno in emp.empno%type)
	is -- 변수 선언
	  v_empno emp.empno%type;
	  v_ename emp.ename%type;
	  v_sal emp.sal%type;
	begin --실행부
	  --select 필드 into 변수 : 필드의 값을 변수에 저장
	  select empno,ename,sal into v_empno,v_ename,v_sal
	  from emp
	  where empno=p_empno;
	   --dbms_output패키지의 put_line함수 호출
	   dbms_output.put_line('사번:'||v_empno);
	   dbms_output.put_line('이름:'||v_ename);
	   dbms_output.put_line('급여:'||v_sal);
	end;
	/
	  
	set serveroutput on;
	
	execute emp_info(7369);
	
  
	2) If문
	 가) 형식
	    IF 조건 THEN
		  statements
		ELSIF 조건 THEN
		  statements
		ELSE
		  statements
		END;
     나) 예제
	    create or replace procedure dept_search(p_empno in number)
		is
		  v_deptno number; --지역변수
		begin
		  select deptno into v_deptno from emp
		  where empno=p_empno;
		    dbms_output.put_line('부서코드:'||v_deptno);
		  if v_deptno = 10 then
		    dbms_output.put_line('경리팀 사원입니다.');
		  elsif v_deptno = 20 then
		    dbms_output.put_line('연구팀 사원입니다.');
		  elsif v_deptno = 30 then
		    dbms_output.put_line('총무팀 사원입니다.');
		  else
		    dbms_output.put_line('기타부서 사원입니다.');
		  end if;-- if끝
		end;
		/
		
		execute dept_search(7369);
		
		select empno,ename,dname
		from emp e, dept d
		where e.deptno=d.deptno and empno=7369;
	
     --문제) professor테이블에서 프로시저이름은 prof_search,
	 교수사번profno를 p_profno라는 변수에 입력,
	 학과번호deptno를 v_deptno라는 변수에 입력처리,
	 if else문을 사용해서 deptno=101=>컴퓨터공학과, 
	 102=>멀티미디어공학과,103=>소프트웨어공학과, 
	 201=>전자공학과, 그 외는 기타학과로 처리하되, 
	 1001을 매개변수값으로 실행
	 
	 
	 execute prof_search(1001);
	 출력결과 :==============================================
	  
	 학과번호는 ____ 번 입니다.  
	 ______________공학과입니다.
	 
	 D:\2강_융합SW\숙제\20190227\이름\20190227
	 
    
	3) FOR LOOP 문
	 가) index : 자동 선언되는 binary_integer형 변수, 1씩 증가
	 나) reverse 옵션이 사용될 경우 1씩 감소
	 다) IN 다음에는 coursor나 select 문이 올 수 있음.
	 --형식
	 FOR index IN [REVERSE] 시작값... end값 LOOP
	   statements
	   ...
	 END LOOP;
	 라) 실습
	   -- binary_integer : PL/SQL에서 사용하는 정수형 변수(java의 int)
	   --type 사용자정의자료형 is table of 테이블
	   -- index by 배열의 인덱스 지정
	   
	   --무명블록
	   declare --선언부
	     --사용자 정의 자료형, type 자료형이름 is ..... 
		 type ename_table is table of emp.ename%type 
		 index by binary_integer;
		 --급여만 저장할 테이블 지정(sal_table)
		 type sal_table is table of emp.sal%type index by binary_integer;
		 ename_tab ename_table; --변수명(ename_tab) 자료형(ename_table)
		 sal_tab sal_table; --변수명(sal_tab) 자료형(sal_table)
		 i binary_integer := 0; --i에 0을 대입
	   begin --실행부
	     --for 커서변수 in 집합 loop
		 for emp_row in (select ename,sal from emp) loop
		   i := i+1; --i값 증가
		   ename_tab(i) := emp_row.ename; --테이블의 i인덱스에 값 저장
		   sal_tab(i) := emp_row.sal;
		 end loop;
		 -- for 인덱스변수 in 시작..종료 loop
		 for cnt in 1 .. i loop
		   dbms_output.put('이름:'||ename_tab(cnt)||',');
		   dbms_output.put_line('급여:'||sal_tab(cnt));
		 end loop;
	   end;
	   /
		 
	4)LOOP 문
      가) EXIT : 무조건 LOOP문 종료
      나) EXIT WHEN : LOOP를 빠져 나가는 조건을 제어문
      --형식
      LOOP
        statements
        다른 LOOP를 포함하여 중첩으로 사용 가능
        EXIT [WHEN condition]
      END LOOP;		
		 
	  다) 실습
	  select * from emp where empno >= 9010;
	  
	  declare --변수 선언부
	    v_cnt number := 9010;
	  begin
	    loop
		  v_cnt := v_cnt+1; --카운트 증가 처리
		  insert into emp (empno,ename,hiredate) 
		  values (v_cnt, 'test'||v_cnt, sysdate);
		  exit when v_cnt >= 9100; --루프 종료 조건
		end loop;
		dbms_output.put_line(v_cnt-9010||'개의 레코드가 입력되었습니다.');
	  end;
	  /
	  
	  select * from emp where empno >= 9010;
	  
	  
	5) WHILE LOOP문
	  가) FOR문과 비슷하며 조건이 TRUE일 경우만 반복되는 LOOP
	  나) 실습
	  
	  delete from emp where empno >= 9050;

      declare
        cnt number := 9050; --조건이 true일 동안 반복
      begin
        while cnt < 9060 loop
          insert into emp(empno, ename, hiredate)
          values (cnt, 'test', sysdate);
          cnt := cnt+1;
        end loop;
        dbms_output.put_line(cnt-9050 || '개의 레코드가 입력되었습니다.');
      end;
      /	  
	  
	  select * from emp where empno >= 9050;
	  
사. 커서(Corsor)
  1) SQL의 작업 영역, Java의 ResultSet과 같은 기능
  2) 모든 SQL문은 연관된 각각의 커서를 소유함
  3) 커서의 종류
    가) 암시적 커서 : 모든 DML과 PL/SQL SELECT문에 대해 선언됨
    나) 명시적 커서 : 프로그래머에 의해 선언되며 이름이 있는 커서
  4) 암시적 커서
    가) 암시적인 커서 : 오라클이나 PL/SQL 실행 메커니즘에 의해 처리되는
        SQL문장이 처리되는 곳에 대한 익명의 주소값
    나) 암시적 커서의 속성
        SQL%ROWCOUNT : 해당 SQL문에 영향을 받는 행의 수
        SQL%FOUND : 해당 SQL 영향을 받는 행의 수가 1개 이상일 경우 TRUE
        SQL%NOTFOUNT : 해당 SQL문에 영향을 받는 행의 수가 없을 경우 TRUE
        SQL%ISOPEN : 항상 FALSE, 암시적 커서가 열려 있는지의 여부 검색
    다) 암시적 커서는 SQL문이 실행되는 순간 자동으로 열림과 닫힘 실행
  5) 커서의 사용 방법
    가) 커서 열기(OPEN)
        OPEN cursor_name;
	나) 커서 패치(FETCH)
        FETCH cursor_name INTO variable1, variable2;
        현재 레코드를 OUTPUT 변수에 저장(한 라인씩 데이터를 읽음)
        커서의 SELECT문의 컬럼수와 OUTPUT 변수의 수와 데이터 타입이 
        동일해야 함
    다) 커서 닫기(CLOSE)
        CLOSE cursor_name;
        사용을 마친 커서는 반드시 닫아 주어야 함.
        커서를 닫은 상태에서 FETCH 를 할 수 없음
  6) 커서 실습
    -- 급여가 이상된 사원 출력
    -- 암시적 커서
       create or replace procedure cursor_test(p_empno in number)
	   is
	     v_sal number;
		 v_update_row number;
		 v_update_sal number;
		 v_name varchar2(50);
	   begin
	     --select 컬럼 into 변수 from 테이블 : 컬럼의 값을 변수에 복사
	     select sal into v_sal from emp where empno=p_empno;
		 if sql%found then -- 레코드가 존재하면
		   dbms_output.put_line('급여:'||v_sal);
		 end if;
		 update emp set sal=sal*1.1 where empno=p_empno;
		 select sal into v_update_sal from emp where empno=p_empno;
		 select ename into v_name from emp where empno=p_empno;
		 v_update_row := sql%rowcount; --영향을 받은 레코드 수
		 dbms_output.put_line('급여가 인상된 사원수:'||v_update_row);
		 dbms_output.put_line('급여가 인상된 사원이름:'||v_name);
		 dbms_output.put_line('인상된 급여:'||v_update_sal);
		 exception -- 예외처리부
		   when NO_DATA_FOUND then
		     dbms_output.put_line('잘못된 사번입니다.');
		   when others then
		     dbms_output.put_line('기타 예외 발생');
	   end;
	   /
	   
	   select * from emp;
	   select sal from emp where empno=7499;
	   execute cursor_test(7499);
	   
	   --대표적 oracle 예외상황
	   -- too_many_rows : 너무 많은 행이 리턴될 경우
	   -- invalid_cursor : 잘못된 커서 사용
	   -- zero_divide : 0으로 나눌 경우
	   -- dup_val_on_index : unique 제약 조건을 위반할 경우
	   
	  -- 명시적 커서 실습
      -- cursor 커서변수이름 is select문장(레코드집합을 한개의 레코드씩
         읽을 때 사용)
        create or replace procedure cursor_test2(v_deptno number)
        is
          cursor dept_avg is 
		    select dname,count(empno) cnt, round(avg(sal),1) salary
            from emp e, dept d
            where e.deptno=d.deptno
            group by dname;
          v_dname varchar(50);
          emp_cnt number;
          sal_avg number;
        begin
          open dept_avg; --커서를 오픈함(select 명령어 실행)
          fetch dept_avg into v_name,emp_cnt,sal_avg; --레코드 저장
          dbms_output.put_line('부서명:'||v_dname);
          dbms_output.put_line('사원수:'||emp_cnt);
          dbms_output.put_line('평균급여:'||sal_avg);
          close dept_avg; --커서 닫기
        end;
        /		
		  
        execute cursor_test2(10);
		
		--위 처리를 for문을 사용하여 처리하는 프로시져
		create or replace procedure cursor_test3
		is
		  cursor dept_avg is
		  select dname,count(empno) cnt, round(avg(sal),1) salary
		  from emp e, dept d
            where e.deptno=d.deptno
            group by dname;
	    begin
		  for emp_row in dept_avg loop
		    dbms_output.put_line('부서명:'||emp_row.dname);
            dbms_output.put_line('사원수:'||emp_row.cnt);
            dbms_output.put_line('평균급여:'||emp_row.salary);
	      end loop;
		end;
		/
		
		execute cursor_test3;

아. 트리거 (교재 p636~)
1) Trigger(방아쇠) : 데이터베이스에서 연쇄적인 동작을 정의함.
   프로시져는 사용자가 직접 execute 명령어로 호출해야하지만,
   트리거는 테이블의 데이터가 변경될 때 자동으로 수행되므로,
   트리거를 사용자가 직접 실행시킬 수 없다.
2) insert, update, delete문이 실행될 때 묵시적으로 수행되는 procedure
3) table에만 정의돌 수 있음 (View에는 사용할 수 없음)
4) Before Trigger : insert, update, delete문이 실행되기 전에 실행
5) After Trigger : DML문이 실행된 후 실행
6) FOR EACH ROW : 행 트리거
   가) 컬럼의 각각의 행의 데이터 행 변화가 생길 때마다 실행됨
   나) 문장 트리거 : 1회만 실행됨
7) 트리거 실습
   create or replace trigger sum_trigger
   after --전이면 before
     insert or update or delete on emp -- emp테이블에서 DML문작업후 실행
   declare
     avg_sal number;
   begin --자동으로 호출
     select avg(sal) into avg_sal from emp;
	 dbms_output.put_line('급여평균:'||avg_sal);
   end;
   /
   
   --평균급여 계산 출력
   select avg(sal) from emp; 395.29 402.77
   
   --새로운 사원입력
   insert into emp(empno,ename,hiredate,sal)
   values (3002, '박철수', sysdate, 500);
   
   update emp set sal=700 where empno=3002;
   
   delete from emp where empno=3002;
   
   







   




	
	  
		 
	 
	 
 

	
	 
	 
	 
	
	 
	
	
	  
	
	
	
	
	
	
	
	  
  
	
  














	
  