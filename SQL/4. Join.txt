4. Join

가. 정의
  하나의 테이블로 원하는 컬럼 정보를 참조할 수 없는 경우 관련된 테이블을
  논리적으로 결합하여 원하는 컬럼 정보를 참조하는 방법
  
나. 전제조건
  1) 논리적으로 결합되는 2개 이상의 테이블에는 반드시 공통 컬럼이 있어야 함.
  2) 공통 컬럼은 데이터타입과 데이터가 동일해야 함.
  
다. join 형식
  select 컬럼 리스트 from 조인대상 테이블들 (컴머로 구분, 별칭 사용)
  where 공통 컬럼을 사용한 조인조건
  and 일반조건
  
  -- student, department 테이블을 조인, 검색하여 이름, 학과코드, 학과이름
  select s.name, s.deptno1, d.dname
  from student s, department d
  where s.deptno1=d.deptno;
  
  문제) emp 테이블의 사원번호(empno)와 dept 테이블의 부서명(dname)을 조회
  
  
  -- 학생테이블, 학과테이블, 교수테이블 3개를 조인해서 학생이름, 학과이름,
  지도교수이름 출력
  select s.name "학생이름", d.dname "학과", p.name "지도교수"
  from student s, department d, professor p
  where s.deptno1=d.deptno and s.profno=p.profno;
  
  
  -- view : 가상의 테이블
  create or replace view student_v as
  select s.name "학생이름", d.dname "학과", p.name "지도교수"
  from student s, department d, professor p
  where s.deptno1=d.deptno and s.profno=p.profno;
  
  -- 뷰를 테이블처럼 사용 가능
  select * from student_v;
  
  -- 아래와 마찬가지
  select * from (select s.name "학생이름", d.dname "학과", p.name "지도교수"
  from student s, department d, professor p
  where s.deptno1=d.deptno and s.profno=p.profno);
  
  -- view를 쓰는 이유는 복잡한 select문을 간단히 하고자 함
  -- java code에 쓸 때 select * from student_v; 쓰면 되기 때문에 코딩이 간략
  통신량이 줄어듦
  -- 코드가 노출되었을 때 좀 더 보안에 좋음
  -- 단, 속도가 약간 느려짐(테이블인 뷰인지 먼저 검사한 후 원본에서 query문을
  가져와 실행하기 때문)
  -- 저장 프로시져를 쓰면 더 줄일 수 있음

라. 종류
  1) cross 조인(Cartesian Product, 카티지언 곱)
    가) 2개 이상의 테이블이 조인될 때 조인조건을 주지 않는것. 즉,
	    where절에서 공통 컬럼에 의한 결합이 발생하지 않아서 두 테이블 간의
		조합가능한 모든 경우의 수를 계산하여 결과를 산출하는 조인대상
	나) 엄밀한 의미에서 조인이 아님.
	    select e.ename, d.dname
		from emp e, dept d; 
		
  2) 내부조인(inner join, 동등조인, Equi Join)
    가장 일반적인 형태, where절에 사용된 공통컬럼들이 동등연산자('=')에
	의해 비교되는 조인대상
	
  3) self join
    참조해야 할 컬럼이 자신의 테이블에 있는 다른 컬럼인 경우에 사용하는
	조인. 바드시 테이블에 대한 별칭을 써야 함.
	-- emp테이블에서 매니저사번(mgr)은 자신의 상급자(사수)의 empno와
	동일. 이를 사용해서 각 사람의 사원번호와 이름, 매니저번호, 매니저의 이름
	을 조회
	select a.empno 사번, a.ename 이름, b.empno 매니저사번, b.ename 매니저
	from emp a, emp b
	where a.mgr = b.empno;
	
  4) 외부(outer)조인대상
    한쪽 테이블에는 해당하는 데이터가 존재하고 다른 쪽 테이블에는 데이터가
	존재하지 않을 경우 모든 데이터를 조회하는 조인
	- 조회 조건에서 (+)기호를 사용하는 조인
	- 데이터가 존재하지 않는 테이블의 조인 조건에 (+) 붙임
	**(주의) 테이블에 (+)를 붙이지 않음
	- (+)가 붙은 컬럼과는 in 연산자를 함께 사용할 수 없음
	- (+)가 붙은 컬럼과는 서브쿼리를 같이 사용할 수 없음.
	
	-- 학생테이블과 교수테이블을 조인하여 학생이름과 지도교수이름을 출력
	(단, 지도교수가 배정되지 않은 학생의 명단도 함께 출력)
	select s.name, p.name
	from student s, professor p
	where s.profno=p.profno(+);
	
  5) ANSI 조인 : 새로운 국제 표준에 따른 조인, oracle 9i부터 지원
    가) 내부조인 : inner join 사용(inner 생략 가능)
	- where절 대신 on 사용
	select e.empno, d.dname
	from emp e inner join dept d
	on e.deptno=d.deptno;
	
	- where절 대신 using 사용(참조하는 컬럼명이 동일한 경우에만 사용 가능)
	select e.empno, d.dname
	from emp e inner join dept d
	using (deptno);
	
	
	
  -- student, department 테이블을 조인, 검색하여 이름, 학과코드, 학과이름
  select s.name, s.deptno1, d.dname
  from student s, department d --조인할 테이블들
  where s.deptno1=d.deptno; --조인 조건
  
  문제) 위 오라클 조인을 ANSI조인으로 바꿔보세요.
  -- from절의 쉼표 대신 join
  -- where 대신 on
  select s.name, s.deptno1, d.dname
  from student s join department d --조인할 테이블들
  on s.deptno1=d.deptno; --조인 조건
  
  나) 외부조인 : [left|right|full] outer join 사용
  -- 데이터가 있는 테이블편을 기준으로 left 또는 right를 붙임
  select s.name sname, p.name pname
  from student s left outer join professor p --student가 오른쪽에 있으면 right를 씀
  on s.profno=p.profno
  order by sname;
  
  문제) 위 ANSI조인을 오라클용 조인으로 바꿔보세요.
  --지도교수가 미배정인 학생 출력
  select s.name sname, p.name pname
  from student s, professor p 
  where s.profno=p.profno(+)
  order by sname;
  
  --지도학생이 없는 교수 출력
  select s.name sname, p.name pname
  from student s, professor p 
  where s.profno(+)=p.profno;
  
  --위 모두를 출력하고 싶을 땐, 양 쪽 모두에(+)를 붙일 수는 없다.
  -- full outer join은 ANSI SQL만 지원
  select s.name 학생이름, s.deptno1, p.name 교수이름
  from student s full outer join professor p
  on s.profno = p.profno
  order by 학생이름;

  
  
  실습문제1)
  emp, dept테이블을 조인해서 부서번호(deptno), 부서명(dname), 
  이름(ename), 급여(sal)를 출력
  (오라클, ANSI용)
  
  
  
  
  
  실습문제2)
  직책(job)이 '사원'인 사원의 이름, 부서번호, 부서이름을 출력
  (오라클, ANSI용)
  
  
  
  
  
  실습문제3)
  이름이 '황인태'인 사원의 부서명을 출력하고
  (오라클, ANSI용)
   
  
  
  실습문제4)
  emp, dept테이블 조인, 모든사원의 이름, 부서번호, 부서명, 급여를 출력
  (오라클, ANSI용)
   
  
  
  실습문제5)
  emp테이블에 있는 empno, mgr을 사용하여 모든사원을 서로의 관계를 
  다음과 같이 출력 ex) "박진성의 매니저는 임채호이다."
  (오라클, ANSI용)
  
   
  
  
  -- 테이블 조인 예(상품테이블, 판매테이블)
  -- 1. 상품테이블(상품코드, 상품명, 단가, 제조사, 제조일자)
  drop table product;
  
create table product (
product_code varchar2(20) not null primary key,
product_name varchar2(50) not null,
price number default 0,
company varchar2(50),
make_date date default sysdate
);

insert into product values('A1', '아이폰', 900000, '애플', '2016-09-01');
insert into product values('A2', '갤럭시노트', 1000000, '삼성', '2018-08-01');
insert into product values('A3', '갤럭시S9', 1200000, '삼성', '2019-01-01');

select * from product;  

  -- 2. 판매 테이블(상품코드, 판매수량)
  create table product_sales (
  product_code varchar2(20) not null,
  amount number default 0
  );
  
  insert into product_sales values('A1', 100);
  insert into product_sales values('A2', 200);
  insert into product_sales values('A3', 300);
  
  select * from product_sales;
  insert into product_sales values('A4', 300);
  
  drop table product_sales;
  
  --references 테이블(컬럼)
  --foreign key(외래키)
  
  create table product_sales (
  product_code varchar2(20) not null
   references product(product_code),
  amount number default 0
  );
  
  -- 상품코드, 상품이름, 제조사, 단가, 수량, 금액
  select p.product_code, product_name, company, price, 
  amount, price*amount money
  from product p, product_sales s --조인할 테이블
  where p.product_code=s.product_code; --조인 조건
  
  -- 위 select문을 view를 활용하여 구현
  create or replace view product_sales_v
  as
  select p.product_code, product_name, company, price, 
  amount, price*amount money
  from product p, product_sales s --조인할 테이블
  where p.product_code=s.product_code; --조인 조건
  
  --뷰를 테이블처럼 사용할 수 있음
  select * from product_sales_v;
  
  -- 제조사가 삼성인 제품을 출력(view를 활용)
  select * from product_sales_v
  where company='삼성';
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  D:\2강_융합SW\숙제\20190219\이름\20190219.sql
  
  
  
  
  
  
  
  
  
  
  
  
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  
	

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  