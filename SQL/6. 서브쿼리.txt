6. 서브쿼리

가. 정의 : 하나의 SQL문장 내부에 존재하는 또 다른 select문
  - 메인쿼리 : 서브쿼리를 포함하고 있는 SQL문
  - 서브쿼리의 목적 : 메인쿼리 내부에서 추가적인 정보 제공
  
나. 구분
  1) 메인쿼리와의 연관성에 따라
     가) 연관성이 없는 서브쿼리 : 서브쿼리로 산출된 row들(행)은 메인 쿼리와
	      독립적인 서브쿼리
	 -- emp 테이블에서 월급을 가장 많이 받는 사원정보를 조회
	 select max(sal) from emp;
	 
	 select * from emp where sal=800;
	 
	 -- 위처럼 두 단계로 구해야할 질의를 서브쿼리로 해결, 서브쿼리 ()로 
	 묶어야 하며 ()먼저 연산됨
	 select * from emp
	 where sal =(select max(sal) from emp);
	 
	 -- 또는 서브쿼리와 메인쿼리의 사용테이블을 명목상 구별하기 위해서 쓸 때도
	 있는데 별칭을 따로 쓸 수도 있다.
	 select * from emp e1
	 where e1.sal = (select max(sal) from emp e2)
	 
	 
	 (문제) 사원들의 평균 급여보다 많은 급여를 받는 사원의 이름, 부서명, 급여를
	 조회
	 
	 1단계) select avg(sal) from emp;
	 
	 2단계) select * from emp where sal > 394.42857;
	 
	 -- 위 2단계로 구한 조회처리를 서브쿼리를 활용해서 조회
	 select * from emp where sal > (select avg(sal) from emp);
	 
	 -- emp, dept 테이블을 조인해서 아래처럼 출력
	 ---------------------
	 이름 | 부서명 | 급여 
	 ---------------------
	 
	 select e.ename 이름, d.dname 부서명, e.sal 급여
	 from emp e, dept d
	 where e.deptno = d.deptno
	 and e.sal > (select avg(sal) from emp);
	 
	 
	-- 부서코드(deptno) 30에 속한 사원 중 최고급여보다 높은 월급을 받는
	사원의 정보 조회
	
	select sal from emp where deptno = 30;
	
	--단일행 서브쿼리 : 서브쿼리의 실행 결과가 한 개의 행만 반환 받음
	--복수행 서브쿼리 : 서브쿼리의 실행 결과가 여러 개의 행을 반환 받음
	--all(집합) 집합의 모든 요소를 만족해야 함.
	--any(집합) 집합의 요소 중 1개만 만족해도 됨.
	
	select * from emp
	where sal > all(select sal from emp where deptno = 30);


    --만약 all 대신 any 연산자를 쓰면 아래와 같은 뜻이 됨(즉, any연산자는
    하나만이라도 만족하면 됨으로 최소 최소값보다 크면 된다는 논리가 됨)

	select * from emp
	where sal > any(select sal from emp where deptno = 30)order by sal;
	
	select * from emp
	where sal > (select min(sal) from emp where deptno = 30)order by sal;
	
	
    나) 연관성이 있는 서브쿼리(상호관련 서브쿼리) : 서브쿼리와 메인쿼리
	사이에 조인을 사용. 반드시 별칭을 사용
	
	-- 사원이름, 부서코드, 부서명 조회
	--오라클용
	select e.ename, e.deptno, d.dname
	from emp e, dept d
	where e.deptno=d.deptno;
	
	--ASNI용
	select e.ename, e.deptno, d.dname
	from emp e join dept d
	on e.deptno=d.deptno;
	
	(서브쿼리, 조인을 사용한 검색의 경우)
	select e.ename, e.deptno, (select d.dname from dept d where e.deptno=d.deptno)
	departmentName from emp e;
	
	-- 부서 평균급여보다 월급이 적은 사원들을 출력
	select ename, sal, deptno, 
	(select avg(sal) from emp where deptno=e.deptno) 부서평균급여
	from emp e
	where sal < (select avg(sal) from emp where deptno=e.deptno);
	
  2) 서브쿼리가 위치하는 곳에 따라 분류
    가) 일반 서브쿼리
    나) 인라인 뷰(inline view) : from절에 위치
	** from절에는 테이블이나 뷰가 위치하는데 이것과 비교해서 서브쿼리에
	의해 결과값들에 대해서 부르는 명칭. 인라인 뷰와 비교해서 정식으로 만들어진
	뷰를 out of line view라고도 함.
	
	-- 사원들의 평균 급여보다는 높고 최대 급여보다는 낮은 월급을 받는
	사원들을 조회
	
	select e.empno, e.ename, e.sal
	from emp e, 
	(select avg(sal) avgs, max(sal) maxs from emp) e2 --인라인 뷰
	where e.sal > e2.avgs and e.sal < e2.maxs
	order by e.sal desc;
	
	(문제) 직책(job)이 "사원"인 사람들이 어떤 부서에 근무하는지
	사원의 이름, 직책, 부서이름을 출력
	(단, from절에 서브쿼리를 사용)
	
	1단계) 직책이 사원인 사람들
	
	2단계) 해당사원들이 어떤 부서에서 근무하는지를 출력
	
	3단계) 1+2단계 서브쿼리로 작성
	
	select e.ename, e.job, d.dname
	from (select ename, job, deptno from emp where job='사원') e, dept d
	where e.deptno = d.deptno;

  3) scalar 서브쿼리(레코드도 하나, 컬럼도 하나)
    서브쿼리에 의해 하나의 행, 하나의 컬럼값을 반환하는 서브쿼리. 9i부터 지원
	-- 직책이 '부장'인 사원의 사원명, 부서명을 조회
	select ename, (select dname from dept d where d.deptno=e.deptno) 부서명
	from emp e
	where job='부장';
	

다. 실습문제

  1) professor, department테이블을 사용해서 
  송도권 교수보다 나중에 입사한 사람의 이름과 입사일, 학과명을 출력
  
    1단계) 교수테이블과 학과테이블 확인
	select name, hiredate, dname
	from professor p, department d
	where p.deptno=d.deptno;
	
	2단계) and절로 완성(서브쿼리 사용)
	select name, hiredate, dname
	from professor p, department d
	where p.deptno=d.deptno and hiredate > 
	(select hiredate from professor where name='송도권');

	
	
  2) 심슨 교수와 같은 입사일에 입사한 교수 중에서 조인형 교수보다
  급여를 적게 받는 교수의 이름과 급여, 입사일을 출력
  
  select name, pay, hiredate
  from professor
  where hiredate=(select hiredate from professor where name='심슨' )
  and pay<(select pay from professor where name='조인형' );
   
  
  
  3) 각 학년(grade)별로 가장 키(height)가 큰 학생들의 학년과 이름, 키를 출력.
  -- 우선 각 학년별로 출력
  select max(height) from student where grade=s.grade; --2,3,4
  
  select grade,name,height
  from student s
  where height=(select max(height) from student where grade=s.grade)
  order by grade;

  
	D:\2강_융합SW\숙제\20190221\이름\20190221.sql
	
	
	
	
	
	
	
	
     	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
		  