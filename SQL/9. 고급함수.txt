9. 고급함수
가. null값 처리함수
1) nvl : null값을 포함하는 컬럼을 특정한 값으로 전환하는 함수
-- 형식 : nvl(null값을 포함하고 있는 컬럼이나 식, 전환하고자 하는 목표값)

  --emp테이블에서 사원의 이름, 직책, 급여, 커미션(수당)을 출력, 
  단, 커미션이 없는 사원은 급여의 3%의 커미션을 적용
	1) where절 사용
	  select ename, job, sal, comm, sal*0.03 커미션
	  from emp
	  where comm is null;
	  
	2) nvl함수 사용
	  select ename, job, sal, comm, nvl(comm, sal*0.03)
	  from emp;
	  
    --문제) emp 테이블에서 사원이름, 부서번호, 직책, 급여, 커미션, 
	연봉(sal*12 + comm) 을 출력
	  select ename, deptno, job, sal, comm, (sal*12 + nvl(comm, 0)) 연봉
	  from emp;

2)nvl2 : null값인 경우와 아닌 경우 모두 특정 값으로 변환하는 함수
   -- 형식 : nvl2(A,B,C) A가 null이 아니면 B, null이면 C로 치환
   
   -- emp테이블에서 커미션이 원래 있는 직원은 5%를 적용하고 없던 직원은
      3%를 적용하여 특별보너스를 계산.
	  select ename, deptno, sal, sal*nvl2(comm,0.05,0.03) 특별보너스
	  from emp;
	  
3) nullif : 두 값을 비교하여 같으면 null, 다르면 첫번째 값을 반환하는 함수
   --형식 : nullif(비교값1, 비교값2)
   
   -- emp테이블에서 이름이 '김'으로 시작하는 직원의 이름과 부서코드 검색
      select ename, deptno from emp
	  where ename like '김%';
	  
	  select ename, deptno from emp
	  where nullif(ename, LTRIM(ename, '김')) is not null;
	  
	  select ename, deptno, LTRIM(ename, '김'), nullif(ename, LTRIM(ename, '김')) 
	  from emp
	  where nullif(ename, LTRIM(ename, '김')) is not null;
	  
4) coalesce(코얼레스, 더 큰 덩어리로 합치다) : 여러 개의 list 중에서
   null이 아닌 첫번째 값을 돌려주는 함수
   --형식 : coalesce(값1, 값2, 값3....) null이 아닌  첫번째 값

   -- emp 테이블에서 커미션이 있으면 커미션을, 만약 커미션이 없으면
      해당 급여를, 커미션과 급여가 다 없는(null)인 경우는 임의로 20을
      치환하여 사원의 사번, 이름, 커미션, 급여, 치환값을 출력
	  
	  select empno, ename, comm, sal, coalesce(comm, sal, 20) 치환값
	  from emp;
	  
   -- sal이 null인 사원이 없기때문에 수정
      update emp set sal=null where empno=7788;
	  
	  
나. 비교 처리 함수
1) decode : 값을 비교하여 해당하는 값을 돌려주는 함수, 단, 비교시에는
정확히 같은 값만 비교가 가능. (java의 switch case문과 비슷)
-- 형식 : decode(컬럼이나 값, 비교값1, 결과값, 비교값2, 결과값,....기본치)
** 기본치는 컬럼이나 값이 비교값과 맞지 않을 때 갖는 값이며 생략되면 null
값을 가짐

--문제) emp테이블에서 각 사원의 이름, 급여, 급여등급을 출력
  (단, 급여가 400만원 이상이면 A등급, 300만원 이상이면 B등급,
   200만원 이상이면 C등급, 100만 이상이면 D등급, 100만원 미만이면 E등급
   으로 처리)
   select ename, sal, trunc(sal/100), 
   decode(trunc(sal/100), 0, 'E', 
   1, 'D',
   2, 'C',
   3, 'B',
   'A')급여등급 from emp;
   
   -- 급여가 소수점이 나오면 제대로 decode함수가 적용안되기 때문에 trunc
   함수를 써야 정확히 값(=)비교가 됨
   -- trunc(숫자1, 자리수) : 숫자1을 소수점 자리수에서 버림, 자리수 생략
   하면 소수자리수 버림
   
   update emp set sal=80 where ename='황인태';
   
   --문제)score테이블에서 이름, 국어점수,영어점수,수학점수, 총점, 평균,
   등급출력 (평균은 round함수를 써서 소수 둘째자리까지만 출력,
   등급은 평균점수가 90~100점이면 A등급, 80점대이면 B등급,
   70점대이면 C등급, 60점대이면 D등급, 60점 미만이면 F등급으로 처리)
    
   create table score (
   student_no varchar2(20) primary key,
   name varchar2(20) not null,
   kor number(3) default 0,
   eng number(3) default 0,
   mat number(3) default 0
   );
   
   --레코드 입력
   insert into score values ('1','kim',90,80,70);
   insert into score values ('2','park',88,85,75);
   insert into score values ('3','hong',99,89,79);
   
   select name, kor, eng, mat, (kor+eng+mat) 총점, 
   (round((kor+eng+mat)/3,2)) 평균,
   decode( trunc(((kor+eng+mat)/3)/10), 10, 'A',
   9, 'A',
   8, 'B',
   7, 'C',
   6, 'D',
   'F') 등급
   from score;
   
   insert into score values('4','choi',100,100,100);
   
2) case : decode 함수를 보완하여 대,소, like 등의 비교처리가 가능한
   함수(case ~ end), (java의 switch문이나 if else문 과 비슷)
   -- 형식 :
   case 컬럼이나 값 when 비교값1 then 치환값1
       [ when 비교값2 then 치환값2
	     when 비교값3 then 치환값3
		 else 기본치 ]
   end
   
   -- professor 테이블에서 각 교수의 이름, 직위, 급여총액(pay+bonus)을
   출력. (단, 이번달 급여는 정교수이면 급여총액의 10%, 조교수면 7%,
   전임강사면 5%를 더하여 주고 급여가 많은 사람부터 정렬)
   
   select name, position,
   case when position='정교수' then (pay+nvl(bonus,0))*1.1
        when position='조교수' then (pay+nvl(bonus,0))*1.07
		when position='전임강사' then (pay+nvl(bonus,0))*1.05
		else pay+nvl(bonus,0)
   end 급여
   from professor
   order by 급여 desc;
   
   문제1) score테이블에서 이름, 국어점수,영어점수,수학점수, 총점, 평균,
   등급출력 (case ~ end 함수를 써서 출력,
   평균은 round함수를 써서 소수 둘째자리까지만 출력,
   등급은 평균점수가 90~100점이면 A등급, 80점대이면 B등급,
   70점대이면 C등급, 60점대이면 D등급, 60점 미만이면 F등급으로 처리) 
   (tip : when ()/3 >=90 then 'A',)
   select name, kor, eng, mat, (kor+eng+mat) 총점
   , (round((kor+eng+mat)/3,2)) 평균
   , case
      when (kor+eng+mat)/3 >=90 then 'A'
	  when (kor+eng+mat)/3 >=80 then 'B'
	  when (kor+eng+mat)/3 >=70 then 'C'
	  when (kor+eng+mat)/3 >=60 then 'D'
	  else 'F'
	 end 등급
	 from score;
    
   문제2) emp테이블에서 사원번호, 사원이름, 부서번호, 부서명 출력하되,
   deptno=10이면 경리부, 20=인사과, 30=영업부, 이외는 '미배정'으로 처리
   select empno, ename, deptno,
     case when deptno=10 then '경리부'
	      when deptno=20 then '인사과'
		  when deptno=30 then '영업부'
		  else '미배정'
	 end 부서명
   from emp;
   
다. 순위를 구하는 함수 (p198~206)
rank : order by를 포함한 query문에서 특정 컬럼에 대한 순위를 구하는 함수
  1) rank() : 중복 순위 다음은 해당 개수만큼 건너뛰고 반환
     -- 형식 : rank() over([partition by 컬럼] order by 컬럼)
	 
  2) dense_rank() : 중복 순위 상관없이 순차적으로 반환(동률순위 무시)
     -- 형식 : dense_rank() over([partition by 컬럼] order by 컬럼)
	 
  3) row_number() : 중복과 관계 없이 무조건 순서대로 반환
     -- 형식 : row_number() over ([partition by 컬럼] order by 컬럼) 
	 
  -- partition by : 순위를 지정하기 위한 컬럼 그룹을 지정함
  
  -- emp테이블에서 전체 사원에 대하여 부서번호, 이름, 급여, 급여순위
  
	 select deptno, ename, sal, rank() over(order by sal desc) "급여순위"
	 from emp;
	 
  -- null인 값이 왜곡되지 않게 처리
     select deptno, ename, sal, 
	 rank() over(order by nvl(sal,0) desc) "급여순위1"
	 , dense_rank() over(order by nvl(sal,0) desc) "급여순위2"
	 , row_number() over(order by nvl(sal,0) desc) "급여순위3"
	 from emp;
	 
	 select deptno, ename, sal, 
	 rank() over(partition by deptno order by nvl(sal,0) desc) 
	 "부서내 급여 순위"
	 from emp;
	  

  --종합문제) mart 테이블
  create table mart (
  id varchar2(20) primary key,
  pname varchar2(20) not null, --제품이름
  price number(10) default 0, --단가
  count number(4) default 0, --수량
  company varchar2(10) --제조회사
  );
  
  insert into mart values('1', '라면', 1000, 10, '삼양');
  insert into mart values('2', '과자', 1500, 3, '농심');
  insert into mart values('3', '아이스크림', 2000, 8, '빙그레');
  insert into mart values('4', '건빵', 1800, 5, '크라운');
  insert into mart values('5', '맥주', 10000, 4, '진로');
  insert into mart values('6', '도시락', 5000, 5, 'CJ');
  
  
  mart테이블에서 제품이름, 단가, 수량, 제조회사, 판매금액, 등급
  (등급은 판매금액이 1만원 미만, D등급 
  10000원 이상, C등급
  20000원 이상, B등급 
  30000원 이상, A등급)
  
  1)decode 를 써서.. 처리, 
  2)case ~ end를 써서 처리
  3)rank()함수를 써서 순위(판매금액기준)도 처리
    
   D:\2강_융합SW\숙제\20190226\이름\20190226.sql
   
   
   
   
   
   
   
   
   
   
   









	  



 	  
	  
	  
	  
	  
	  
	  

	
